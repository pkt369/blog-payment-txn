services:
  postgres-coordinator:
    image: citusdata/citus:12.1
    container_name: payment-citus-coordinator
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data_coordinator:/var/lib/postgresql/data
      - ./db-init/init-coordinator.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  postgres-worker1:
    image: citusdata/citus:12.1
    container_name: payment-citus-worker1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5433:5432"
    volumes:
      - ./postgres_data_worker1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  postgres-worker2:
    image: citusdata/citus:12.1
    container_name: payment-citus-worker2
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5434:5432"
    volumes:
      - ./postgres_data_worker2:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  postgres-worker3:
    image: citusdata/citus:12.1
    container_name: payment-citus-worker3
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5435:5432"
    volumes:
      - ./postgres_data_worker3:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  postgres-worker4:
    image: citusdata/citus:12.1
    container_name: payment-citus-worker4
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5436:5432"
    volumes:
      - ./postgres_data_worker4:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  postgres-worker5:
    image: citusdata/citus:12.1
    container_name: payment-citus-worker5
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    ports:
      - "5437:5432"
    volumes:
      - ./postgres_data_worker5:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    shm_size: '1gb'
    command: [ "postgres", "-c", "max_connections=500", "-c", "shared_buffers=1GB" ]

  app:
    build: .
    container_name: payment-app
    ports:
      - "8080:8080"
    depends_on:
      - postgres-coordinator
    environment:
      - DB_HOST=postgres-coordinator
      - DB_PORT=5432
      - DB_NAME=payment_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    mem_limit: 8g
    cpus: 4.0

  k6:
    image: grafana/k6:latest
    container_name: payment-k6
    depends_on:
      - app
    volumes:
      - ./k6-scripts:/scripts
  #    command: run /scripts/test-script.js

  kafka:
    image: bitnami/kafka:3.7
    container_name: payment-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 5s
      timeout: 3s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: payment-kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  portainer:
    image: portainer/portainer-ce
    container_name: payment-portainer
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  postgres_data_coordinator:
  postgres_data_worker1:
  postgres_data_worker2:
  postgres_data_worker3:
  postgres_data_worker4:
  postgres_data_worker5:
  portainer_data: